<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <title>Interface Robot</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <!-- FontAwesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"/>
  <!-- Google Fonts -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap"/>
  <!-- CSS personnalisé -->
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"/>
</head>
<body class="bg-light">

  <!-- Navbar SPA -->
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
      <a class="navbar-brand d-flex align-items-center" href="#" onclick="show('hubView')">
        <img src="{{ url_for('static', filename='logo_upssitech.png') }}" alt="UPSSITECH" height="40" class="me-2"/>
        Interface Robot
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNavbar">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="mainNavbar">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a id="nav-manual" class="nav-link" href="#" onclick="show('manualView')">Contrôle Manuel</a>
          </li>
          <li class="nav-item">
            <a id="nav-voice" class="nav-link" href="#" onclick="show('voiceView')">Mode Vocal</a>
          </li>
        </ul>
        <span id="bleStatus" class="navbar-text text-danger me-3">
          <i class="fa fa-circle"></i> Déconnecté
        </span>
        <button id="bleConnectBtn" class="btn btn-outline-light btn-sm">Se connecter</button>
      </div>
    </div>
  </nav>

  <div class="container my-5">

    <!-- Hub -->
    <section id="hubView">
      <h1 class="mb-4 text-center">Hub de Commande du Robot</h1>
      <p class="lead text-center">
        Bienvenue sur l’interface de contrôle à distance du robot.<br/>
        Choisissez un mode de pilotage :
      </p>
      <div class="row justify-content-center mt-5">
        <div class="col-md-5 col-lg-4 mb-4">
          <div class="card shadow-sm h-100 text-center">
            <div class="card-body d-flex flex-column justify-content-center">
              <h2 class="card-title mb-3">Contrôle Manuel</h2>
              <p class="card-text mb-4">Pilotez le robot avec des commandes directionnelles en temps réel.</p>
              <button class="btn btn-primary" onclick="show('manualView')">Mode Manuel</button>
            </div>
          </div>
        </div>
        <div class="col-md-5 col-lg-4 mb-4">
          <div class="card shadow-sm h-100 text-center">
            <div class="card-body d-flex flex-column justify-content-center">
              <h2 class="card-title mb-3">Mode Vocal</h2>
              <p class="card-text mb-4">Contrôlez le robot par la voix grâce à la reconnaissance vocale.</p>
              <button class="btn btn-primary mb-2" onclick="show('voiceView')">Mode Vocal</button>
              <button class="btn btn-secondary" onclick="testPiConnection()">Tester la connexion Pi</button>
            </div>
          </div>
        </div>
      </div>
      <div id="hubAlert" class="alert alert-info text-center mt-4">
        Pour vous connecter : activez le Bluetooth et cliquez sur « Se connecter ».
      </div>
    </section>

    <!-- Manuel -->
    <section id="manualView" style="display:none;">
      <div class="text-center">
        <div id="manualAlert" class="alert alert-warning text-center">Déconnecté</div>
        <h1 class="mb-4">Contrôle Manuel du Robot</h1>
        <p class="mb-4">Utilisez les flèches ci-dessous pour piloter le robot.</p>
        <div class="card d-inline-block p-3 shadow">
          <div class="card-header">Commandes Directionnelles</div>
          <div class="card-body">
            <div class="d-flex flex-column align-items-center">
              <button class="btn btn-secondary btn-lg m-2" onclick="sendCmd('F')"><i class="fa fa-arrow-up fa-2x"></i></button>
              <div>
                <button class="btn btn-secondary btn-lg m-2" onclick="sendCmd('L')"><i class="fa fa-arrow-left fa-2x"></i></button>
                <button class="btn btn-danger btn-lg m-2" onclick="sendCmd('S')"><i class="fa fa-stop fa-2x"></i></button>
                <button class="btn btn-secondary btn-lg m-2" onclick="sendCmd('R')"><i class="fa fa-arrow-right fa-2x"></i></button>
              </div>
              <button class="btn btn-secondary btn-lg m-2" onclick="sendCmd('B')"><i class="fa fa-arrow-down fa-2x"></i></button>
            </div>
            <div class="d-flex justify-content-center mt-3">
              <button class="btn btn-success btn-lg mx-2" style="width:4rem; height:4rem; font-size:1.75rem;" onclick="sendCmd('+')">+</button>
              <button class="btn btn-danger btn-lg mx-2" style="width:4rem; height:4rem; font-size:1.75rem;" onclick="sendCmd('-')">−</button>
              <button class="btn btn-primary btn-lg mx-2" style="width:4rem; height:4rem; font-size:1.75rem;" onclick="sendCmd('A')">A</button>
            </div>
          </div>
        </div>
        <div class="mt-4">
          <button class="btn btn-outline-primary" onclick="show('hubView')">Retour</button>
        </div>
      </div>
    </section>

    <!-- Vocal -->
    <section id="voiceView" style="display:none;">
      <div class="container text-center">
        <div id="voiceAlert" class="alert alert-warning text-center">Déconnecté</div>
        <h1 class="mb-4">Commande Vocale du Robot</h1>
        <p class="mb-4">Appuyez sur le bouton ci-dessous et parlez pour donner un ordre :</p>
        <button id="recordButton" class="btn btn-outline-danger rounded-circle p-4">
          <i class="fa fa-microphone fa-2x"></i>
        </button>
        <p class="mt-2"><small>Cliquez pour démarrer ou arrêter l'enregistrement</small></p>
        <div class="card mx-auto mt-4" style="max-width:600px;">
          <div class="card-header">Transcription</div>
          <div class="card-body text-start">
            <p id="transcriptText" class="fst-italic text-muted">(La transcription apparaîtra ici)</p>
            <img id="videoFeed" src="/pi/video_feed" style="display:none; width:600px; height:450px; object-fit:cover; margin-top:1rem;" />
          </div>
        </div>
        <div class="mt-4">
          <button class="btn btn-outline-primary" onclick="show('hubView')">Retour</button>
        </div>
      </div>
    </section>

  </div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function show(view) {
      ['hubView','manualView','voiceView'].forEach(id =>
        document.getElementById(id).style.display = (id===view ? 'block' : 'none')
      );
      document.getElementById('nav-manual').classList.toggle('active', view==='manualView');
      document.getElementById('nav-voice').classList.toggle('active', view==='voiceView');
      document.getElementById('hubAlert').style.display = (view==='hubView' ? 'block' : 'none');
    }

    const UART_SVC = '0000ffe0-0000-1000-8000-00805f9b34fb', UART_CHR = '0000ffe1-0000-1000-8000-00805f9b34fb';
    let device, uartChar, tracking=false, pollInterval;
    const RPI_BASE = "";

    function updateUIConnected() {
      const st = document.getElementById('bleStatus');
      st.innerHTML = '<i class="fa fa-circle"></i> Connecté';
      st.classList.replace('text-danger','text-success');
      document.getElementById('bleConnectBtn').style.display = 'none';
      ['hubAlert','manualAlert','voiceAlert'].forEach(id =>
        document.getElementById(id).style.display = 'none'
      );
    }

    async function connectBLE() {
      try {
        device = await navigator.bluetooth.requestDevice({filters:[{services:[UART_SVC]}]});
        const server = await device.gatt.connect();
        const svc = await server.getPrimaryService(UART_SVC);
        uartChar = await svc.getCharacteristic(UART_CHR);
        await uartChar.startNotifications();
        uartChar.addEventListener('characteristicvaluechanged', e =>
          console.log('Reçu ➜', new TextDecoder().decode(e.target.value))
        );
        updateUIConnected();
      } catch(e) {
        alert('Échec BLE : '+e.message);
      }
    }

    async function sendCmd(cmd) {
      if(!uartChar) return alert('Connectez le Bluetooth !');
      await uartChar.writeValue(new TextEncoder().encode(cmd));
    }

    async function testPiConnection() {
      try {
        const resp = await fetch(RPI_BASE+'/pi/coords');
        const data = await resp.json();
        alert('✅ Pi détecté : '+JSON.stringify(data).slice(0,100));
      } catch(e) {
        alert('❌ Impossible de joindre le Pi : '+e.message);
      }
    }

    function encodeWAV(buffers, totalLen, sampleRate=44100) { /* inchangé */ }

    const recBtn = document.getElementById('recordButton'), transcriptPara = document.getElementById('transcriptText');
    recBtn.dataset.recording='false'; let audioContext, recorderNode, stream, recordedBuffers=[], recordingLength=0;

    recBtn.addEventListener('click', async () => { /* inchangé, finit par startTracking ou sendCmd sequences */ });
    document.getElementById('bleConnectBtn').addEventListener('click', connectBLE);

    async function startTracking(color) {
      tracking = true;
      document.getElementById('videoFeed').style.display = 'block';
      const centerX = 300, tolerance = 20;
      pollInterval = setInterval(async () => {
        try {
          const resp = await fetch('/pi/coords', {cache:'no-store'});
          const coords = await resp.json();
          const c = coords[color];
          if(!c) {
            await sendCmd('R');
          } else {
            const [x] = c;
            const dx = x - centerX;
            if(Math.abs(dx) > tolerance) {
              await sendCmd(dx > 0 ? 'R' : 'L');
            } else {
              await sendCmd('F');
            }
          }
        } catch(e) {
          await sendCmd('S');
        }
      }, 100);
    }

    function stopTracking() {
      tracking=false;
      clearInterval(pollInterval);
      document.getElementById('videoFeed').style.display='none';
      sendCmd('S');
    }

    // initialisation
    show('hubView');
  </script>
</body>
</html>
